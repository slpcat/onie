# Ufi: For Icelake-D projects, add Intel vroc support
# Ufi: For Icelake-D projects, enlarge ONIE-BOOT to 256 MiB.
# Ufi: Reserve 5GB for UFI-DIAG
ufi_diag_gfdisk_type="0x3000"
#Gen by tool
ufi_diag_gpt_uuid="018F0A0F-24A0-74C2-9D80-0B16FA3E4E3D"
ufi_diag_fs_type="ext4"
ufi_diag_label="UFI-DIAG"

# Perform various initializations and sanity checks prior to
# installing ONIE.
init_onie_install()
{
    # Find target install block device.
    # - Default value from burned in install.conf
    # - Overridden with -d CLI arg
    [ -b "$onie_dev" ] || onie_dev="$(install_device_platform)"
    [ $? -eq 0 ] || {
        echo "WARNING: Unable to find ONIE install block device."
    }

    [ -b "$onie_dev" ] || {
        echo "ERROR: Invalid ONIE install device: $onie_dev"
        exit 1
    }

    # check if we have an mmcblk device
    blk_suffix=
    echo $onie_dev | grep -q mmcblk && blk_suffix="p"
    # check if we have an nvme device
    echo $onie_dev | grep -q nvme && blk_suffix="p"
    # Ufi: check if we have an md device
    echo $onie_dev | grep -q md && blk_suffix="p"

    # Ufi: We should use ufi-changed onie-blkdev-common instead of the default
    # ./onie-blkdev-common (rootconf/grub-arch/sysroot-lib-onie/onie-blkdev-common)
    [ -r /lib/onie/onie-blkdev-common ] || {
        echo "ERROR: Unable to find /lib/onie/onie-blkdev-common"
        exit 1
    }
    . /lib/onie/onie-blkdev-common

    # wipe out current onie_dev if ONIE will embed to another
    # one, or just keep updating to current one
    curr_onie_dev=$(onie_get_boot_disk)
    # wipe out current onie_dev if ONIE will embed to another
    if [ -b "$curr_onie_dev" ] && [ "$curr_onie_dev" != "$onie_dev" ] ; then
        if [ "$onie_boot_reason" = "embed" ] ; then
            wipe_curr_onie_dev="yes"
        else
            onie_dev="$curr_onie_dev"
        fi
    fi

    running_firmware="$(onie_get_running_firmware)"

    # Determine the desired firmware to install based on the
    # installer.
    case "$image_firmware" in
        auto)
            # auto-detect whether BIOS or UEFI
            if [ -d "/sys/firmware/efi/efivars" ] ; then
                install_firmware="uefi"
            else
                install_firmware="bios"
            fi
            ;;

        uefi)
            [ -d "/sys/firmware/efi/efivars" ] || {
                echo "ERROR: UEFI firmware install requested, but running system does not support UEFI"
                exit 1
            }
            install_firmware="uefi"
            ;;

        bios)
            install_firmware="bios"
            ;;

        *)
            echo "WARNING: Unknown firmware requested: $onie_firmware"
            echo "WARNING: Defaulting to 'bios'."
            install_firmware="bios"

    esac

    # Peform a few sanity checks prior to starting the embed/upgrade
    # operation.

    # Check the requested firmware type is compatible with the running
    # system for upgrades.  When embedding it is OK to change firmware
    # types, as the entire system is being reprovisioned.
    if [ "$onie_boot_reason" != "embed" ] ; then
        # For upgrades the pre/post firmware must be equal.
        if [ "$running_firmware" != "$install_firmware" ] ; then
            echo "ERROR: Upgrade firmware mismatch detected."
            echo "ERROR: Upgrading from firmware '$running_firmware' to '$install_firmware' is not supported."
            exit 1
        fi
    fi

    # ONIE Partition parameters.  'start' and 'size' are in units of 512
    # byte sectors.

    # sectors_per_mb = (1024 * 1024) / 512 = 2048
    sectors_per_mb=2048

    # Note: Determine the disk partitioning layout.  In the case of
    # upgrade the running partition type could be different from the
    # installer's image type.
    #
    # Also Note: On platforms that use the "disk" eeprom type,
    # onie-syseeprom content is stored in the area just before
    # the first partition (2048 below).  See sys_eeprom_disk.c
    # in the busybox source.
    if [ "$install_firmware" = "uefi" ] ; then

        # UEFI EFI System Partition
        uefi_esp_part=1
        uefi_esp_start=2048
        # 256MB
        uefi_esp_size=$(( 256 * $sectors_per_mb ))

        # ONIE-BOOT Paritition
        onie_boot_part=$(( $uefi_esp_part + 1 ))
        onie_boot_start=$(( $uefi_esp_start + $uefi_esp_size ))
        # 256MB
        onie_boot_size=$(( 256 * $sectors_per_mb ))

        # UFI-DIAG Partition
        ufi_diag_part=$(( $onie_boot_part + 1 ))
        ufi_diag_start=$(( $onie_boot_start + $onie_boot_size ))
        # 5GB
        ufi_diag_size=$(( 5120 * $sectors_per_mb ))

        # Helper functions
        init_disk="init_uefi_disk"
        verify_partitions="verify_uefi_partitions"
    elif [ "$image_partition_type" = "gpt" ] ; then
        # GRUB Boot Partition
        grub_boot_part=1
        grub_boot_start=2048
        # 2MB
        grub_boot_size=$(( 2 * $sectors_per_mb ))

        # ONIE-BOOT Paritition
        onie_boot_part=$(( $grub_boot_part + 1 ))
        onie_boot_start=$(( $grub_boot_start + $grub_boot_size ))
        # 256MB
        onie_boot_size=$(( 256 * $sectors_per_mb ))

        # UFI-DIAG Partition
        ufi_diag_part=$(( $onie_boot_part + 1 ))
        ufi_diag_start=$(( $onie_boot_start + $onie_boot_size ))
        # 5GB
        ufi_diag_size=$(( 5120 * $sectors_per_mb ))

        # Helper functions
        init_disk="init_gpt_disk"
        verify_partitions="verify_gpt_partitions"
    elif [ "$image_partition_type" = "msdos" ] ; then
        # ONIE-BOOT Paritition
        onie_boot_part=1
        onie_boot_start=2048
        # 256MB
        onie_boot_size=$(( 256 * $sectors_per_mb ))
        # Helper functions
        init_disk="init_msdos_disk"
        verify_partitions="verify_msdos_partitions"
    else
        echo "ERROR: Unsupported partition type: $image_partition_type"
        exit 1
    fi

}

# Ufi: Reserve 5GB for UFI-DIAG
# Creates a GPT partition
create_gpt_partition()
{
    local p=$1
    for v in part label start size gpt_uuid ; do
        eval $v='$'${p}_$v
    done
    [ "$verbose" = "yes" ] && echo "Creating $label on: ${onie_dev}$part"

    # Create a new partition with the given start, size, gpt_uuid and
    # name.  Additionally set partition attributes based on the
    # particular partition.

    case "$p" in

        grub_boot | onie_boot)
            # Set system partition (bit 0) and read-only (bit 60)
            # attributes.
            attr_bitmask="0x1000000000000001"
            ;;
        # Ufi: Reserve 5GB for UFI-DIAG
        ufi_diag)
            # Set system partition (bit 0) attribute in order not to be deleted by should_delete_gpt_partition() in onie-uninstaller-common
            attr_bitmask="0x0000000000000001"
            ;;
        uefi_esp)
            # Set system partition (bit 0) attribute.
            attr_bitmask="0x1"
            ;;
        *)
        echo "ERROR: unknown ONIE partition name: $p"
        exit 1
    esac

    local tmp_log=$(mktemp)
    sgdisk --new=$part:$start:+$size \
        --typecode=$part:$gpt_uuid \
        --attributes=$part:=:$attr_bitmask \
        --change-name=$part:"$label" "$onie_dev" > $tmp_log 2>&1 || {
        echo "ERROR: Problems creating $label partition $part on: $onie_dev"
        cat $tmp_log && rm -f $tmp_log
        exit 1
    }

    if [ "$p" = "grub_boot" ] ; then
        # Set "bootable" flag in the protective MBR partition table.
        # Some buggy UEFI firmwares operating in CSM (legacy BIOS
        # mode) require this.  See http://www.rodsbooks.com/gdisk/bios.html.
        parted "$onie_dev" disk_set pmbr_boot on > $tmp_log 2>&1 || {
            echo "ERROR: Problems setting bootable flag on protected MBR on: $onie_dev"
            cat $tmp_log && rm -f $tmp_log
            exit 1
        }
    fi

    rm -f $tmp_log
}

# Ufi: Reserve 5GB for UFI-DIAG
init_gpt_partition_table()
{
    local blkdev=$1
    local sgdisk_log=$(mktemp)

    sgdisk --zap-all "$blkdev" > $sgdisk_log 2>&1 || {
        # retry again for fixing the issue:
        # Invalid partition data!
        sgdisk --zap-all "$blkdev" >> $sgdisk_log 2>&1 || {
            echo "ERROR: Problems wiping GPT and MBR on: $blkdev"
            cat $sgdisk_log && rm -f $sgdisk_log
            exit 1
        }
    }

    sgdisk --clear --mbrtogpt "$blkdev" > $sgdisk_log 2>&1 || {
        echo "ERROR: Problems creating GPT disk label on: $blkdev"
        cat $sgdisk_log && rm -f $sgdisk_log
        exit 1
    }

    rm -f $sgdisk_log
}

# Ufi: Reserve 5GB for UFI-DIAG
# Initializes the disk for GPT usage.
# - Creates the GPT disk label on the device, wiping out all partitions
# - Creates the needed GPT partitions
init_gpt_disk()
{
    # Create GPT disk label
    echo "Creating GPT disk label on: $onie_dev"

    if [ "$wipe_curr_onie_dev" = "yes" ] ; then
        init_gpt_partition_table "$curr_onie_dev"
    fi

    init_gpt_partition_table "$onie_dev"

    # Ufi: Reserve 5GB for UFI-DIAG
    for p in grub_boot onie_boot ufi_diag ; do
        create_gpt_partition $p
    done
}

# Ufi: Reserve 5GB for UFI-DIAG
# Verify the format of the ONIE partitions
#   For each ONIE partition (GRUB-BOOT, ONIE-BOOT, UFI-DIAG) verify:
#     1. expected partition number
#     2. expected partition GUID
#     3. expected starting sector address
#     4. expected partition size

verify_gpt_partitions()
{
    # Ufi: Reserve 5GB for UFI-DIAG
    LABELs="uefi_esp onie_boot"

    ufi_diag_instance=`blkid | grep $ufi_diag_label`
    if [ -n "$ufi_diag_instance" ]; then
        LABELs="uefi_esp onie_boot ufi_diag"
    fi

    for p in $LABELs; do
        for v in part label start size gpt_uuid ; do
            eval $v='$'${p}_$v
        done

        # Check UUID
        sgdisk -i $part $onie_dev | grep -q $gpt_uuid || {
            echo "$label: Unable to find GUID $gpt_uuid on $onie_dev"
            return 1
        }

        # Check starting sector
        local part_start=$(sgdisk -i $part $onie_dev | grep 'First sector:' | awk '{ print $3 }')
        [ $part_start -eq $start ] || {
            echo "$label: Start sector mismatch.  Found $part_start, expected $start"
            return 1
        }

        # Check partition size
        local part_size=$(sgdisk -i $part $onie_dev | grep 'Partition size:' | awk '{ print $3 }')
        [ $part_size -eq $size ] || {
            echo "$label: Partition size mismatch.  Found $part_size, expected $size"
            return 1
        }
    done

    return 0
}

# Initializes the disk for UEFI usage.
# - Creates the GPT disk label on the device, wiping out all partitions
# - Creates the needed GPT partitions
init_uefi_disk()
{
    # Create GPT disk label
    echo "Initializing UEFI disk partitions on: $onie_dev"

    if [ "$wipe_curr_onie_dev" = "yes" ] ; then
        init_gpt_partition_table "$curr_onie_dev"
    fi

    init_gpt_partition_table "$onie_dev"

    # Ufi: Reserve 5GB for UFI-DIAG
    for p in uefi_esp onie_boot ufi_diag; do
        create_gpt_partition $p
    done

    # Create file system on UEFI ESP partition
    local uefi_esp_dev="${onie_dev}$blk_suffix$uefi_esp_part"
    [ "$verbose" = "yes" ] && echo "Creating $uefi_esp_fs_type file system on: $uefi_esp_dev"
    mkfs.$uefi_esp_fs_type -n "$uefi_esp_label" $uefi_esp_dev > /dev/null 2>&1 || {
        echo "Error: Unable to create $uefi_esp_fs_type file system on: $uefi_esp_dev"
        exit 1
    }

    mkdir -p $uefi_esp_mnt || {
        echo "Error: Unable to create UEFI ESP mount point: $uefi_esp_mnt"
        exit 1
    }
    mount -o defaults,rw -t $uefi_esp_fs_type $uefi_esp_dev $uefi_esp_mnt || {
        echo "Error: Unable to mount $uefi_esp_label ($uefi_esp_dev) on ${uefi_esp_mnt}"
        exit 1
    }

    # erase any stale EFI BootOrder variables from NVRAM.
    uefi_rm_stale_bootnum

}

# Verify the format of the ONIE UEFI partitions
#   For each ONIE partition (EFI System, ONIE-BOOT) verify:
#     1. expected partition number
#     2. expected partition GUID
#     3. expected starting sector address
#     4. expected partition size

verify_uefi_partitions()
{
    # Ufi: Reserve 5GB for UFI-DIAG
    LABELs="uefi_esp onie_boot"

    ufi_diag_instance=`blkid | grep $ufi_diag_label`
    if [ -n "$ufi_diag_instance" ]; then
        LABELs="uefi_esp onie_boot ufi_diag"
    fi
    
    for p in $LABELs; do
        for v in part label start size gpt_uuid ; do
            eval $v='$'${p}_$v
        done

        # Check UUID
        sgdisk -i $part $onie_dev | grep -q $gpt_uuid || {
            echo "$label: Unable to find GUID $gpt_uuid on $onie_dev"
            return 1
        }

        # Check starting sector
        local part_start=$(sgdisk -i $part $onie_dev | grep 'First sector:' | awk '{ print $3 }')
        [ $part_start -eq $start ] || {
            echo "$label: Start sector mismatch.  Found $part_start, expected $start"
            return 1
        }

        # Check partition size
        local part_size=$(sgdisk -i $part $onie_dev | grep 'Partition size:' | awk '{ print $3 }')
        [ $part_size -eq $size ] || {
            echo "$label: Partition size mismatch.  Found $part_size, expected $size"
            return 1
        }
    done

    return 0
}


# Ufi: Reserve 5GB for UFI-DIAG
# This function is run by install.sh *after* the onie-update.tar file
# is extracted.
install_image()
{

    init_onie_install

    echo "Installing ONIE on: $onie_dev"
    
    if [ -n "$pre_install_hook" ]; then
        eval $pre_install_hook || {
            echo "Error: pre-install failed"
            exit 1
        }
    fi
 
    if [ "$onie_boot_reason" = "embed" ] ; then
        # umount any partitions that might be mounted on this disk
        for p in $(seq 8) ; do
            umount ${curr_onie_dev}$blk_suffix$p > /dev/null 2>&1
            umount ${onie_dev}$blk_suffix$p > /dev/null 2>&1
        done
        # Initialize block device
        eval $init_disk
    else
        # umount ONIE-BOOT if mounted
        umount $(onie_get_boot_dev) > /dev/null 2>&1
        eval $verify_partitions || {
            echo "ERROR: Partitions on target device do not look right: $onie_dev"
            echo "ERROR: Recommend re-embedding ONIE instead of updating."
            exit 1
        }
    fi

    mkdir -p $onie_boot_mnt

    onie_boot_dev="${onie_dev}$blk_suffix$onie_boot_part"
    ufi_diag_dev="${onie_dev}$blk_suffix$ufi_diag_part"

    # Preserve a few precious files if they exist
    if mount -o defaults,rw -t $onie_boot_fs_type $onie_boot_dev $onie_boot_mnt > /dev/null 2>&1 ; then
        if [ -r $grub_env_file ] ; then
            preserve_grubenv=yes
            cp $grub_env_file /tmp/grubenv
        fi
        if [ -d $onie_update_dir ] ; then
            preserve_update_dir=yes
            cp -a $onie_update_dir /tmp/preserve-update
        fi
        if [ "$onie_boot_reason" != "embed" ] ; then
            if [ -r $diag_bootcmd_file ] ; then
                preserve_diag_bootcmd=yes
                cp $diag_bootcmd_file /tmp/preserve_diag_bootcmd
            fi
        fi
        umount $onie_boot_mnt > /dev/null 2>&1
    fi

    # Create file system on ONIE-BOOT partition
    echo "Creating $onie_boot_fs_type file system on: $onie_boot_dev"
    mkfs.$onie_boot_fs_type -Fq -L $onie_boot_label $onie_boot_dev || {
        echo "Error: Unable to create $onie_boot_fs_type file system on: $onie_boot_dev"
        exit 1
    }

    # Ufi: Create file system on UFI-DIAG partition after ONIE-BOOT partition when embed mode is specified
    if [ "$onie_boot_reason" = "embed" ] ; then
        echo "Creating $ufi_diag_fs_type file system on: $ufi_diag_dev"
        mkfs.$ufi_diag_fs_type -Fq -L $ufi_diag_label $ufi_diag_dev || {
            echo "Error: Unable to create $ufi_diag_fs_type file system on: $ufi_diag_dev"
            exit 1
        }
    fi

    mount -o defaults,rw -t $onie_boot_fs_type $onie_boot_dev $onie_boot_mnt || {
        echo "Error: Unable to mount $onie_boot_label ($onie_boot_dev) on ${onie_boot_mnt}"
        exit 1
    }

    # Create ONIE data directory
    mkdir -p $onie_root_dir

    # Put the ONIE kernel and initramfs into place.
    kernel_name="vmlinuz-${image_kernel_version}-onie"
    kernel_signature="${kernel_name}.sig"
    initrd_name="initrd.img-${image_kernel_version}-onie"
    initrd_signature="${initrd_name}.sig"
    cp onie.vmlinuz $onie_root_dir/$kernel_name || {
        echo "Error: Unable to copy ONIE kernel to $onie_root_dir/$kernel_name"
        exit 1
    }
    cp onie.initrd $onie_root_dir/$initrd_name || {
        echo "Error: Unable to copy ONIE initrd to $onie_root_dir/$initrd_name"
        exit 1
    }
    if [ "$image_secure_grub" = "yes" ] && [ "$install_firmware" = "uefi" ] ; then
        cp onie.vmlinuz.sig $onie_root_dir/$kernel_signature || {
            echo "ERROR: problems installing kernel signature on: $boot_dev"
            exit 1
        }
        cp onie.initrd.sig $onie_root_dir/$initrd_signature || {
            ls -la
            echo "ERROR: problems installing kernel signature on: $boot_dev"
            exit 1
        }
    fi
    # install ONIE tools
    rm -rf $onie_root_dir/tools && mkdir -p $onie_root_dir/tools
    tar -C $onie_root_dir/tools -xf onie-tools.tar.xz || {
        echo "Error: Unable to copy ONIE tools to $onie_root_dir/tools"
        exit 1
    }

    if [ "$install_firmware" = "uefi" ] ; then
        install_uefi_loader $uefi_esp_mnt $onie_dev $onie_boot_mnt || {
            echo "Error: Problems installing UEFI loader on device: $uefi_esp_mnt, $onie_dev, $onie_boot_mnt"
            exit 1
        }
    else
        if [ "$onie_boot_reason" = "embed" ] ; then
            # When embedding ONIE install ONIE's grub into the MBR block
            # device, e.g. /dev/sda.
            install_grub mbr $onie_dev $onie_boot_mnt || {
                echo "Error: Problems installing GRUB on device: $onie_dev, $onie_boot_mnt"
                exit 1
            }
        fi

        # Also install GRUB on the ONIE partition block device,
        # e.g. /dev/sda1.
        install_grub part $onie_boot_dev $onie_boot_mnt || {
            echo "Error: Problems installing GRUB on device: ${onie_boot_dev}, $onie_boot_mnt"
            exit 1
        }
        # Clean BOOT.CSV file that is relevant just for UEFI boot
        if ls "$onie_root_dir/grub/"BOOT.CSV* 1> /dev/null 2>&1; then
            rm "$onie_root_dir/grub/"BOOT.CSV*
        fi
    fi

    # Restore the previous grubenv file
    if [ "$preserve_grubenv" = "yes" ] ; then
        cp /tmp/grubenv $grub_env_file
    fi

    # Restore the previous update directory
    if [ "$preserve_update_dir" = "yes" ] ; then
        cp -a /tmp/preserve-update $onie_update_dir
    else
        # Create empty update logging directories
        mkdir -p $onie_update_dir $onie_update_results_dir $onie_update_pending_dir
    fi

    # Return to default boot mode on the next boot.  Use this
    # installer's version of onie-boot-mode.
    $onie_root_dir/tools/bin/onie-boot-mode -q -o none
    if [ "$onie_boot_reason" = "embed" ] ; then
        # Also clear out the NOS mode
        $onie_root_dir/tools/bin/onie-nos-mode -c
    fi

    if [ -n "$post_install_hook" ]; then
        eval $post_install_hook || {
            echo "Error: post-install failed"
            exit 1
        }
    fi

    # update sys_eeprom
    update_syseeprom
	
    # Set root account password:
	# if Secure Boot Extended is active and it is a UEFI system.
	# This is overridden by:
	#  onie/machine/<manufactuer>/<machine>/installer/install-platform
	#  See that file for password details.
    if [ "$image_secure_boot_ext" = "yes" ]  && [ "$install_firmware" = "uefi" ] ; then	
        set_default_passwd
    fi

}

